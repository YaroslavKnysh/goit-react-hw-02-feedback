{"version":3,"sources":["components/Statistics.jsx","components/FeedbackOptions.jsx","components/Feedback.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","countTotal","percentage","FeedbackOptions","onAddFeedback","type","onClick","e","Feedback","state","_","sum","values","this","total","countTotalFeedback","Math","round","key","setState","addFeedback","countPositiveFeedbackPercentage","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAaeA,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,WAAnC,OACjB,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCQWC,EAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACtB,gCACE,wBAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIH,EAAc,SAAlD,kBAGA,wBAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIH,EAAc,YAAlD,qBAGA,wBAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIH,EAAc,QAAlD,qBCJEI,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXX,KAAM,EACNC,QAAS,EACTC,IAAK,GALK,E,sDAQd,WACE,OAAOU,IAAEC,IAAID,IAAEE,OAAOC,KAAKJ,U,6CAE7B,WACE,IAAMK,EAAQD,KAAKE,qBACnB,OAAID,EACKE,KAAKC,MAAOJ,KAAKJ,MAAMX,KAAOgB,EAAS,KAEzC,M,yBAET,SAAYI,GACV,OAAOL,KAAKM,SAAL,eAAiBD,EAAML,KAAKJ,MAAMS,GAAO,M,oBAGlD,WAAU,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CACEd,cAAe,SAAAc,GACb,EAAKE,YAAYF,MAIrB,4CAC+B,IAA9BL,KAAKE,qBACJ,8BACE,uDAGF,cAAC,EAAD,CACEjB,KAAMe,KAAKJ,MAAMX,KACjBC,QAASc,KAAKJ,MAAMV,QACpBC,IAAKa,KAAKJ,MAAMT,IAChBC,WAAYY,KAAKE,qBACjBb,WAAYW,KAAKQ,2C,GA3CNC,aCKRC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,uDACA,cAAC,EAAD,QCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.81283809.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, countTotal, percentage }) => (\r\n  <ul>\r\n    <li>Good:{good}</li>\r\n    <li>Neutral:{neutral}</li>\r\n    <li>Bad:{bad}</li>\r\n    <li>Total:{countTotal}</li>\r\n    <li>Positive feedback:{percentage}%</li>\r\n  </ul>\r\n);\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ onAddFeedback }) => (\r\n  <div>\r\n    <button type=\"button\" onClick={e => onAddFeedback('good')}>\r\n      Good\r\n    </button>\r\n    <button type=\"button\" onClick={e => onAddFeedback('neutral')}>\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" onClick={e => onAddFeedback('bad')}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Feedback.module.css';\r\nimport _ from 'lodash';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\n\r\nclass Feedback extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n  }\r\n  countTotalFeedback() {\r\n    return _.sum(_.values(this.state));\r\n  }\r\n  countPositiveFeedbackPercentage() {\r\n    const total = this.countTotalFeedback();\r\n    if (total) {\r\n      return Math.round((this.state.good / total) * 100);\r\n    }\r\n    return '0';\r\n  }\r\n  addFeedback(key) {\r\n    return this.setState({ [key]: this.state[key] + 1 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FeedbackOptions\r\n          onAddFeedback={key => {\r\n            this.addFeedback(key);\r\n          }}\r\n        />\r\n\r\n        <h2>Statistics</h2>\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <div>\r\n            <p>There is no feedback</p>\r\n          </div>\r\n        ) : (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            countTotal={this.countTotalFeedback()}\r\n            percentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Feedback };\r\n","import React from 'react';\nimport { Feedback } from './components/Feedback.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Please leave feedback</h1>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}