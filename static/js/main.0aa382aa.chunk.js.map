{"version":3,"sources":["components/Feedback.jsx","App.js","index.js"],"names":["Feedback","state","good","neutral","bad","_","sum","values","this","total","countTotalFeedback","Math","round","key","setState","type","onClick","addFeedback","countPositiveFeedbackPercentage","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAKMA,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,EACNC,QAAS,EACTC,IAAK,GALK,E,sDAQd,WACE,OAAOC,IAAEC,IAAID,IAAEE,OAAOC,KAAKP,U,6CAE7B,WACE,IAAMQ,EAAQD,KAAKE,qBACnB,OAAID,EACKE,KAAKC,MAAOJ,KAAKP,MAAMC,KAAOO,EAAS,KAEzC,M,yBAET,SAAYI,GACV,OAAOL,KAAKM,SAAL,eAAiBD,EAAML,KAAKP,MAAMY,GAAO,M,oBAGlD,WAAU,IAAD,OACP,OACE,gCACE,wBACEE,KAAK,SACLC,QAAS,WACP,EAAKC,YAAY,SAHrB,kBAQA,wBACEF,KAAK,SACLC,QAAS,WACP,EAAKC,YAAY,YAHrB,qBAQA,wBACEF,KAAK,SACLC,QAAS,WACP,EAAKC,YAAY,QAHrB,iBAQA,4CAC+B,IAA9BT,KAAKE,qBACJ,8BACE,uDAGF,+BACE,uCAAUF,KAAKP,MAAMC,QACrB,0CAAaM,KAAKP,MAAME,WACxB,sCAASK,KAAKP,MAAMG,OACpB,wCAAWI,KAAKE,wBAChB,oDAAuBF,KAAKU,kCAA5B,iB,GA7DWC,aCORC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,uDACA,cAAC,EAAD,QCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0aa382aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Feedback.module.css';\r\nimport _ from 'lodash';\r\n\r\nclass Feedback extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n  }\r\n  countTotalFeedback() {\r\n    return _.sum(_.values(this.state));\r\n  }\r\n  countPositiveFeedbackPercentage() {\r\n    const total = this.countTotalFeedback();\r\n    if (total) {\r\n      return Math.round((this.state.good / total) * 100);\r\n    }\r\n    return '0';\r\n  }\r\n  addFeedback(key) {\r\n    return this.setState({ [key]: this.state[key] + 1 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            this.addFeedback('good');\r\n          }}\r\n        >\r\n          Good\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            this.addFeedback('neutral');\r\n          }}\r\n        >\r\n          Neutral\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            this.addFeedback('bad');\r\n          }}\r\n        >\r\n          Bad\r\n        </button>\r\n        <h2>Statistics</h2>\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <div>\r\n            <p>There is no feedback</p>\r\n          </div>\r\n        ) : (\r\n          <ul>\r\n            <li>Good:{this.state.good}</li>\r\n            <li>Neutral:{this.state.neutral}</li>\r\n            <li>Bad:{this.state.bad}</li>\r\n            <li>Total:{this.countTotalFeedback()}</li>\r\n            <li>Positive feedback:{this.countPositiveFeedbackPercentage()}%</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Feedback };\r\n","import React from 'react';\nimport { Feedback } from './components/Feedback.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Please leave feedback</h1>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}