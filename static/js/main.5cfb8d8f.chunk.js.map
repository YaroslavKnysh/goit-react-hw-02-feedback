{"version":3,"sources":["components/Statistics.jsx","components/FeedbackOptions.jsx","components/Section.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","countTotal","percentage","FeedbackOptions","onAddFeedback","options","map","option","type","onClick","e","_","capitalize","Section","title","children","App","state","sum","values","this","total","countTotalFeedback","Math","round","key","setState","className","addFeedback","Object","keys","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAaeA,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,WAAnC,OACjB,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCKWC,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,QAAlB,OACtB,8BACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,wBAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAcG,IAAlD,SACGI,IAAEC,WAAWL,WCEPM,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCwDUC,E,kDArDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXnB,KAAM,EACNC,QAAS,EACTC,IAAK,GALK,E,sDAQd,WACE,OAAOW,IAAEO,IAAIP,IAAEQ,OAAOC,KAAKH,U,6CAE7B,WACE,IAAMI,EAAQD,KAAKE,qBACnB,OAAID,EACKE,KAAKC,MAAOJ,KAAKH,MAAMnB,KAAOuB,EAAS,KAEzC,M,yBAET,SAAYI,GACV,OAAOL,KAAKM,SAAL,eAAiBD,EAAML,KAAKH,MAAMQ,GAAO,M,oBAGlD,WAAU,IAAD,OACP,OACE,sBAAKE,UAAU,MAAf,UACE,cAAC,EAAD,CAASb,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEV,cAAe,SAAAqB,GACb,EAAKG,YAAYH,IAEnBpB,QAASwB,OAAOC,KAAKV,KAAKH,WAG9B,cAAC,EAAD,CAASH,MAAO,aAAhB,SACiC,IAA9BM,KAAKE,qBACJ,8BACE,uDAGF,cAAC,EAAD,CACExB,KAAMsB,KAAKH,MAAMnB,KACjBC,QAASqB,KAAKH,MAAMlB,QACpBC,IAAKoB,KAAKH,MAAMjB,IAChBC,WAAYmB,KAAKE,qBACjBpB,WAAYkB,KAAKW,6C,GA7CbC,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5cfb8d8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, countTotal, percentage }) => (\r\n  <ul>\r\n    <li>Good:{good}</li>\r\n    <li>Neutral:{neutral}</li>\r\n    <li>Bad:{bad}</li>\r\n    <li>Total:{countTotal}</li>\r\n    <li>Positive feedback:{percentage}%</li>\r\n  </ul>\r\n);\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nconst FeedbackOptions = ({ onAddFeedback, options }) => (\r\n  <div>\r\n    {options.map(option => (\r\n      <button type=\"button\" onClick={e => onAddFeedback(option)}>\r\n        {_.capitalize(option)}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './components/Feedback.module.css';\nimport _ from 'lodash';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n  countTotalFeedback() {\n    return _.sum(_.values(this.state));\n  }\n  countPositiveFeedbackPercentage() {\n    const total = this.countTotalFeedback();\n    if (total) {\n      return Math.round((this.state.good / total) * 100);\n    }\n    return '0';\n  }\n  addFeedback(key) {\n    return this.setState({ [key]: this.state[key] + 1 });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            onAddFeedback={key => {\n              this.addFeedback(key);\n            }}\n            options={Object.keys(this.state)}\n          />\n        </Section>\n        <Section title={'Statistics'}>\n          {this.countTotalFeedback() === 0 ? (\n            <div>\n              <p>There is no feedback</p>\n            </div>\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              countTotal={this.countTotalFeedback()}\n              percentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}